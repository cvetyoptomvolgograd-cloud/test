import math
import logging
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select, delete

from states import BouquetStates
from database import get_db_session, get_or_create_user, Bouquet
from utils import format_price


PAGE_SIZE = 5


# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ú–ï–î–ò–ê =====

def _extract_media_ref(item) -> str | None:
    """
    –ü—Ä–∏–≤–µ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç photos –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è aiogram:
      - –µ—Å–ª–∏ dict: —Å–Ω–∞—á–∞–ª–∞ –±–µ—Ä—ë–º file_id, –∑–∞—Ç–µ–º url
      - –µ—Å–ª–∏ str: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å (–ø–æ–¥—Ö–æ–¥–∏—Ç –∏ file_id, –∏ https://)
    """
    if item is None:
        return None
    if isinstance(item, dict):
        v = item.get("file_id") or item.get("tg_file_id") or item.get("telegram_file_id") or item.get("url")
        if isinstance(v, str) and v.strip():
            return v.strip()
        return None
    if isinstance(item, str) and item.strip():
        return item.strip()
    return None


def _first_media(bouquet: Bouquet) -> str | None:
    photos = getattr(bouquet, "photos", None)
    if not photos:
        return None
    if isinstance(photos, list):
        for it in photos:
            ref = _extract_media_ref(it)
            if ref:
                return ref
        return None
    return _extract_media_ref(photos)


def _composition_text(comp) -> str:
    """–°–≤–µ—Å—Ç–∏ —Å–æ—Å—Ç–∞–≤ –∫ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É."""
    if not comp:
        return "‚Äî"
    try:
        if isinstance(comp, list):
            parts = []
            for it in comp:
                if isinstance(it, dict):
                    name = (it.get("raw_name") or it.get("name") or "").strip()
                    qty = it.get("qty")
                    if name:
                        parts.append(f"‚Ä¢ {name}{f' ‚Äî {qty}' if qty else ''}")
                else:
                    parts.append(f"‚Ä¢ {it}")
            return "\n".join(parts) if parts else "‚Äî"
        return str(comp)
    except Exception:
        return "‚Äî"


def _price_text(price_minor: int | None, currency: str | None) -> str:
    try:
        return format_price((price_minor or 0)) if hasattr(format_price, "__call__") else f"{(price_minor or 0) / 100:.0f} {currency or 'RUB'}"
    except Exception:
        rub = (price_minor or 0) / 100
        return f"{rub:.0f} {currency or 'RUB'}"


def _details_caption(b: Bouquet) -> str:
    return (
        f"<b>{b.title_display or b.short_title or '–ë—É–∫–µ—Ç'}</b>\n\n"
        f"<b>–¶–µ–Ω–∞:</b> {_price_text(b.price_minor, b.currency)}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{(b.description or '‚Äî')}\n\n"
        f"<b>–°–æ—Å—Ç–∞–≤:</b>\n{_composition_text(b.composition)}"
    )


def _detail_keyboard(bouquet_id: str, page: int | None = None) -> types.InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.add(types.InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_bouquet:{bouquet_id}"))
    kb.add(types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_bouquet:{bouquet_id}"))
    if page is not None:
        kb.add(types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"back_to_list:{page}"))
    else:
        kb.add(types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_list"))
    kb.adjust(2)
    return kb.as_markup()


def _list_keyboard(items, page: int, total_pages: int) -> types.InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    for b in items:
        kb.add(types.InlineKeyboardButton(
            text=f"#{b.bouquet_id} {b.short_title or b.title_display}",
            callback_data=f"bouquet_detail:{b.bouquet_id}:{page}"
        ))
    # –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    nav = InlineKeyboardBuilder()
    if page > 1:
        nav.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"bouquet_list:page:{page-1}"))
    if page < total_pages:
        nav.add(types.InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"bouquet_list:page:{page+1}"))
    nav.adjust(2)
    kb.attach(nav)
    return kb.as_markup()


# ===== –°–ü–ò–°–û–ö –ë–£–ö–ï–¢–û–í =====

async def list_bouquets(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±—É–∫–µ—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ)."""
    session = await get_db_session()
    try:
        user = await get_or_create_user(session, message.from_user.id)

        # –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –±—É–∫–µ—Ç—ã
        res = await session.execute(
            select(Bouquet)
            .where(Bouquet.user_id == user.id)
            .order_by(Bouquet.created_at.desc())
        )
        all_bouquets = res.scalars().all()
        if not all_bouquets:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±—É–∫–µ—Ç–æ–≤. –ù–∞–∂–º–∏—Ç–µ ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å –±—É–∫–µ—Ç¬ª.")
            return

        total = len(all_bouquets)
        total_pages = max(1, math.ceil(total / PAGE_SIZE))
        page = 1
        start = (page - 1) * PAGE_SIZE
        items = all_bouquets[start:start + PAGE_SIZE]

        text = f"üìö –í–∞—à–∏ –±—É–∫–µ—Ç—ã ({total}): —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}"
        await message.answer(text, reply_markup=_list_keyboard(items, page, total_pages))
    except Exception as e:
        logging.error(f"list_bouquets error: {e}", exc_info=True)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±—É–∫–µ—Ç–æ–≤.")
    finally:
        await session.close()


async def handle_bouquet_pagination(callback: types.CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü —Å–ø–∏—Å–∫–∞."""
    try:
        page = int(callback.data.split(":")[2])
    except Exception:
        page = 1

    session = await get_db_session()
    try:
        user = await get_or_create_user(session, callback.from_user.id)
        res = await session.execute(
            select(Bouquet)
            .where(Bouquet.user_id == user.id)
            .order_by(Bouquet.created_at.desc())
        )
        all_bouquets = res.scalars().all()
        if not all_bouquets:
            await callback.message.edit_text("–ë—É–∫–µ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            await callback.answer()
            return

        total = len(all_bouquets)
        total_pages = max(1, math.ceil(total / PAGE_SIZE))
        page = max(1, min(page, total_pages))
        start = (page - 1) * PAGE_SIZE
        items = all_bouquets[start:start + PAGE_SIZE]

        text = f"üìö –í–∞—à–∏ –±—É–∫–µ—Ç—ã ({total}): —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}"
        await callback.message.edit_text(text, reply_markup=_list_keyboard(items, page, total_pages))
        await callback.answer()
    except Exception as e:
        logging.error(f"handle_bouquet_pagination error: {e}", exc_info=True)
        try:
            await callback.answer("–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.")
        except Exception:
            pass
    finally:
        await session.close()


# ===== –î–ï–¢–ê–õ–ò –ë–£–ö–ï–¢–ê =====

async def show_bouquet_details(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –±—É–∫–µ—Ç–∞ —Å —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)."""
    try:
        parts = (callback.data or "").split(":")
        bouquet_id = parts[1] if len(parts) > 1 else ""
        page = int(parts[2]) if len(parts) > 2 else None
    except Exception:
        bouquet_id = ""
        page = None

    session = await get_db_session()
    try:
        res = await session.execute(select(Bouquet).where(Bouquet.bouquet_id == bouquet_id))
        b = res.scalar_one_or_none()
        if not b:
            await callback.message.answer("–ë—É–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —É–¥–∞–ª—ë–Ω).")
            await callback.answer()
            return

        caption = _details_caption(b)
        media_ref = _first_media(b)

        if media_ref:
            await callback.message.answer_photo(
                photo=media_ref,  # <-- –∑–¥–µ—Å—å —Ç–µ–ø–µ—Ä—å –°–¢–†–û–ö–ê (file_id –∏–ª–∏ URL), –Ω–µ dict
                caption=caption,
                parse_mode="HTML",
                reply_markup=_detail_keyboard(b.bouquet_id, page)
            )
        else:
            await callback.message.answer(
                caption,
                parse_mode="HTML",
                reply_markup=_detail_keyboard(b.bouquet_id, page)
            )

        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_bouquet_details: {e}", exc_info=True)
        try:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –±—É–∫–µ—Ç–∞.")
        except Exception:
            pass
    finally:
        await session.close()


# ===== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï / –£–î–ê–õ–ï–ù–ò–ï =====

async def start_edit_bouquet(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    try:
        bouquet_id = (callback.data or "").split(":")[1]
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞.")
        return

    kb = InlineKeyboardBuilder()
    kb.add(types.InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_field:title:{bouquet_id}"))
    kb.add(types.InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_field:description:{bouquet_id}"))
    kb.add(types.InlineKeyboardButton(text="–°–æ—Å—Ç–∞–≤", callback_data=f"edit_field:composition:{bouquet_id}"))
    kb.add(types.InlineKeyboardButton(text="–¶–µ–Ω–∞", callback_data=f"edit_field:price:{bouquet_id}"))
    kb.add(types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"bouquet_detail:{bouquet_id}"))
    kb.adjust(2)

    await callback.message.answer("–ß—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º?", reply_markup=kb.as_markup())
    await callback.answer()


async def handle_edit_field(callback: types.CallbackQuery, state: FSMContext):
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ –Ω—É–∂–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    –î–∞–ª—å—à–µ –≤–≤–æ–¥ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –æ–±—â–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã:
      - editing_title ‚Üí process_title
      - editing_description ‚Üí process_description
      - editing_composition ‚Üí process_composition
      - editing_price ‚Üí process_price
    """
    try:
        _, field, bouquet_id = (callback.data or "").split(":")
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞.")
        return

    await state.update_data(edit_bouquet_id=bouquet_id)

    if field == "title":
        await state.set_state(BouquetStates.editing_title)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
    elif field == "description":
        await state.set_state(BouquetStates.editing_description)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    elif field == "composition":
        await state.set_state(BouquetStates.editing_composition)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ—Å—Ç–∞–≤ (–∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–∞—Å—Ç–µ—Ä–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –Ω–æ–≤–æ–º –±—É–∫–µ—Ç–µ):")
    elif field == "price":
        await state.set_state(BouquetStates.editing_price)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
    else:
        await callback.message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ.")
    await callback.answer()


async def handle_delete_bouquet(callback: types.CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å –±—É–∫–µ—Ç –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ –∂–µ–ª–∞–Ω–∏—é)."""
    try:
        bouquet_id = (callback.data or "").split(":")[1]
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞.")
        return

    session = await get_db_session()
    try:
        await session.execute(delete(Bouquet).where(Bouquet.bouquet_id == bouquet_id))
        await session.commit()
        await callback.message.answer(f"–ë—É–∫–µ—Ç #{bouquet_id} —É–¥–∞–ª—ë–Ω.")
        await callback.answer()
    except Exception as e:
        logging.error(f"handle_delete_bouquet error: {e}", exc_info=True)
        try:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±—É–∫–µ—Ç.")
        except Exception:
            pass
    finally:
        await session.close()


async def handle_back_to_list(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–≤–∞–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É ‚Äî –≤–µ—Ä–Ω—ë–º—Å—è –∫ –Ω–µ–π)."""
    try:
        parts = (callback.data or "").split(":")
        page = int(parts[1]) if len(parts) > 1 else 1
    except Exception:
        page = 1

    session = await get_db_session()
    try:
        user = await get_or_create_user(session, callback.from_user.id)
        res = await session.execute(
            select(Bouquet)
            .where(Bouquet.user_id == user.id)
            .order_by(Bouquet.created_at.desc())
        )
        all_bouquets = res.scalars().all()
        if not all_bouquets:
            await callback.message.edit_text("–ë—É–∫–µ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            await callback.answer()
            return

        total = len(all_bouquets)
        total_pages = max(1, math.ceil(total / PAGE_SIZE))
        page = max(1, min(page, total_pages))
        start = (page - 1) * PAGE_SIZE
        items = all_bouquets[start:start + PAGE_SIZE]

        text = f"üìö –í–∞—à–∏ –±—É–∫–µ—Ç—ã ({total}): —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}"
        await callback.message.edit_text(text, reply_markup=_list_keyboard(items, page, total_pages))
        await callback.answer()
    except Exception as e:
        logging.error(f"handle_back_to_list error: {e}", exc_info=True)
        try:
            await callback.answer("–û—à–∏–±–∫–∞.")
        except Exception:
            pass
    finally:
        await session.close()
