from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select
import logging
import math

from states import BouquetStates
from database import get_db_session, Category, Product


PAGE_SIZE = 6


# ---------- –í–∏—Ç—Ä–∏–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π ----------

async def show_category_page(chat_id: int, state: FSMContext, bot, page: int = 1):
    session = await get_db_session()
    try:
        result = await session.execute(select(Category).order_by(Category.name.asc()))
        categories = result.scalars().all()

        if not categories:
            await bot.send_message(chat_id, "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—É—Å—Ç—ã. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –≤ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
            return

        total_pages = max(1, math.ceil(len(categories) / PAGE_SIZE))
        page = max(1, min(page, total_pages))
        start = (page - 1) * PAGE_SIZE
        chunk = categories[start:start + PAGE_SIZE]

        kb = InlineKeyboardBuilder()
        for cat in chunk:
            kb.add(types.InlineKeyboardButton(text=f"üìÅ {cat.name}", callback_data=f"cat_select:{cat.id}:{page}"))

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        nav = InlineKeyboardBuilder()
        if page > 1:
            nav.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"cat_page:{page-1}"))
        if page < total_pages:
            nav.add(types.InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"cat_page:{page+1}"))
        nav.adjust(2)

        # –î–µ–π—Å—Ç–≤–∏—è
        actions = InlineKeyboardBuilder()
        actions.add(types.InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="composition:done"))

        kb.attach(nav)
        kb.attach(actions)
        await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.as_markup())
    except Exception as e:
        logging.error(f"show_category_page error: {e}", exc_info=True)
        await bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
    finally:
        await session.close()


# ---------- –í–∏—Ç—Ä–∏–Ω–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ----------

async def show_product_page(chat_id: int, state: FSMContext, bot, category_id: int, page: int = 1):
    session = await get_db_session()
    try:
        # –Ω–∞–π–¥—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        result_cat = await session.execute(select(Category).where(Category.id == category_id))
        category = result_cat.scalar_one_or_none()
        if not category:
            await bot.send_message(chat_id, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        result = await session.execute(
            select(Product).where(Product.category_id == category_id).order_by(Product.name.asc())
        )
        products = result.scalars().all()
        if not products:
            await bot.send_message(chat_id, f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category.name}¬ª –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
            return

        total_pages = max(1, math.ceil(len(products) / PAGE_SIZE))
        page = max(1, min(page, total_pages))
        start = (page - 1) * PAGE_SIZE
        chunk = products[start:start + PAGE_SIZE]

        kb = InlineKeyboardBuilder()
        for p in chunk:
            title = p.name if not p.color else f"{p.name} ({p.color})"
            kb.add(types.InlineKeyboardButton(text=f"‚ûï {title}", callback_data=f"prod_select:{p.id}"))

        nav = InlineKeyboardBuilder()
        if page > 1:
            nav.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"prod_page:{category_id}:{page-1}"))
        if page < total_pages:
            nav.add(types.InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"prod_page:{category_id}:{page+1}"))
        nav.adjust(2)

        actions = InlineKeyboardBuilder()
        actions.add(types.InlineKeyboardButton(text="‚óÄÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="composition:back_to_categories"))
        actions.add(types.InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="composition:done"))

        kb.attach(nav)
        kb.attach(actions)

        await bot.send_message(chat_id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category.name}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=kb.as_markup())
    except Exception as e:
        logging.error(f"show_product_page error: {e}", exc_info=True)
        await bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
    finally:
        await session.close()


# ---------- –ö–æ–ª–±—ç–∫–∏ –∏ –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ----------

async def handle_category_page(callback: types.CallbackQuery, state: FSMContext):
    page = int(callback.data.split(":")[1])
    await callback.answer()
    await show_category_page(callback.message.chat.id, state, callback.bot, page=page)

async def handle_category_select(callback: types.CallbackQuery, state: FSMContext):
    # format: cat_select:<cat_id>:<page>
    parts = callback.data.split(":")
    category_id = int(parts[1])
    page = int(parts[2]) if len(parts) > 2 else 1
    await callback.answer()
    await state.set_state(BouquetStates.choosing_product)
    await show_product_page(callback.message.chat.id, state, callback.bot, category_id=category_id, page=page)

async def handle_product_page(callback: types.CallbackQuery, state: FSMContext):
    # format: prod_page:<cat_id>:<page>
    _, cat_id, page = callback.data.split(":")
    await callback.answer()
    await show_product_page(callback.message.chat.id, state, callback.bot, category_id=int(cat_id), page=int(page))

async def handle_product_select(callback: types.CallbackQuery, state: FSMContext):
    """
    –ü–æ—Å–ª–µ –∫–ª–∏–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä—É:
      1) —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ id –≤ FSM
      2) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É ¬´–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è <–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞>¬ª
    """
    product_id = int(callback.data.split(":")[1])
    await state.update_data(selected_product_id=product_id)
    await state.set_state(BouquetStates.entering_quantity)

    # –ü–æ–ª—É—á–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ/—Ü–≤–µ—Ç, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    session = await get_db_session()
    try:
        res = await session.execute(
            select(Product, Category).join(Category, Product.category_id == Category.id).where(Product.id == product_id)
        )
        row = res.one_or_none()
        if not row:
            await callback.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–µ—Ä–Ω—ë–º—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.")
            await state.set_state(BouquetStates.choosing_category)
            await show_category_page(callback.message.chat.id, state, callback.bot, page=1)
            await callback.answer()
            return

        product, _ = row
        title = product.name if not product.color else f"{product.name} ({product.color})"
        await callback.message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è <b>{title}</b> (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ 1..9999):",
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"handle_product_select error: {e}", exc_info=True)
        await callback.message.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä.")
    finally:
        await session.close()

    await callback.answer()

async def process_quantity(message: types.Message, state: FSMContext):
    try:
        qty_text = (message.text or "").strip()
        if not qty_text.isdigit():
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
            return
        qty = int(qty_text)
        if not (1 <= qty <= 9999):
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1..9999. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
            return

        data = await state.get_data()
        product_id = int(data.get("selected_product_id") or 0)
        if not product_id:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ–≤–∞—Ä. –í–µ—Ä–Ω—ë–º—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.")
            await state.set_state(BouquetStates.choosing_category)
            await show_category_page(message.chat.id, state, message.bot, page=1)
            return

        session = await get_db_session()
        try:
            res = await session.execute(
                select(Product, Category).join(Category, Product.category_id == Category.id).where(Product.id == product_id)
            )
            row = res.one_or_none()
            if not row:
                await message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–µ—Ä–Ω—ë–º—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.")
                await state.set_state(BouquetStates.choosing_category)
                await show_category_page(message.chat.id, state, message.bot, page=1)
                return

            product, category = row
            composition = data.get("composition", []) or []
            composition.append({
                "raw_name": product.name,
                "qty": qty,
                "color": product.color,
                "type": product.product_type,
                "category": category.name,
                "product_id": product.id
            })
            await state.update_data(composition=composition, selected_product_id=None)

            title = product.name if not product.color else f"{product.name} ({product.color})"
            await message.answer(
                f"–î–æ–±–∞–≤–ª–µ–Ω–æ: <b>{title}</b> ‚Äî {qty} —à—Ç.\n"
                f"‚ûï –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å.",
                parse_mode="HTML"
            )

            await state.set_state(BouquetStates.choosing_category)
            await show_category_page(message.chat.id, state, message.bot, page=1)
        finally:
            await session.close()

    except Exception as e:
        logging.error(f"process_quantity error: {e}", exc_info=True)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        await state.set_state(BouquetStates.choosing_category)
        await show_category_page(message.chat.id, state, message.bot, page=1)

async def handle_composition_done(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    comp = data.get("composition", []) or []
    if not comp:
        await state.set_state(BouquetStates.waiting_price)
        await callback.message.edit_text("–°–æ—Å—Ç–∞–≤ –ø—É—Å—Ç. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
        return

    text = "<b>–°–æ—Å—Ç–∞–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω:</b>\n"
    for item in comp:
        text += f"‚Ä¢ {item['raw_name']} ‚Äî {item['qty']}\n"
    text += "\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):"

    await state.set_state(BouquetStates.waiting_price)
    await callback.message.edit_text(text, parse_mode="HTML")

async def handle_composition_back(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(BouquetStates.choosing_category)
    await show_category_page(callback.message.chat.id, state, callback.bot, page=1)
