from aiogram import types
from aiogram.fsm.context import FSMContext
import logging

from states import BouquetStates
from .product_handler import send_excel_template, handle_catalog_import
from .excel_handler import export_bouquets_to_excel  # –µ—Å–ª–∏ –Ω—É–∂–µ–Ω —ç–∫—Å–ø–æ—Ä—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ (–±—É–∫–µ—Ç–æ–≤)


async def show_settings(message: types.Message):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ", callback_data="settings:photo_limit")],
        [types.InlineKeyboardButton(text="üì§ –ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω –∫–∞—Ç–∞–ª–æ–≥–∞", callback_data="settings:excel_template")],
        [types.InlineKeyboardButton(text="üì• –ò–º–ø–æ—Ä—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ (xlsx)", callback_data="settings:import_catalog")],
        [types.InlineKeyboardButton(text="üì¶ –≠–∫—Å–ø–æ—Ä—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ (–±—É–∫–µ—Ç—ã)", callback_data="settings:export_catalog")],
        [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_menu")],
    ])
    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=keyboard)


async def handle_settings(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    parts = (callback_query.data or "").split(":")
    action = parts[1] if len(parts) > 1 else ""

    if action == "photo_limit":
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ (1‚Äì10):")
        await state.set_state(BouquetStates.waiting_photo_limit)

    elif action == "excel_template":
        await send_excel_template(callback_query.message)

    elif action == "import_catalog":
        await callback_query.message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ .xlsx-—Ñ–∞–π–ª –ø–æ —à–∞–±–ª–æ–Ω—É:\n"
            "‚Ä¢ –õ–∏—Å—Ç ¬´–ö–∞—Ç–µ–≥–æ—Ä–∏–∏¬ª: –∫–æ–ª–æ–Ω–∫–∞ <b>category</b>\n"
            "‚Ä¢ –õ–∏—Å—Ç ¬´–¢–æ–≤–∞—Ä—ã¬ª: –∫–æ–ª–æ–Ω–∫–∏ <b>category</b>, <b>name</b>, [color], [type]\n\n"
            "‚ö†Ô∏è –ü—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ç–µ–∫—É—â–∏–π –∫–∞—Ç–∞–ª–æ–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤ –±—É–¥–µ—Ç <b>–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω</b>."
        )
        await state.set_state(BouquetStates.waiting_catalog_file)

    elif action == "export_catalog":
        await export_bouquets_to_excel(callback_query.message)

    else:
        await callback_query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        return

    await callback_query.answer()


async def process_photo_limit(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ª–∏–º–∏—Ç–∞ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        new_limit = int((message.text or "").strip())
    except Exception:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.")
        return

    if not (1 <= new_limit <= 10):
        await message.answer("–õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 10. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    from database import get_db_session, get_or_create_user

    session = await get_db_session()
    try:
        user = await get_or_create_user(session, message.from_user.id)
        user.media_limit = new_limit
        await session.commit()
        await message.answer(f"–õ–∏–º–∏—Ç —Ñ–æ—Ç–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {new_limit}")
        await show_settings(message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ —Ñ–æ—Ç–æ: {e}", exc_info=True)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ —Ñ–æ—Ç–æ.")
    finally:
        await session.close()
