# handlers/media_processing.py
from aiogram import F, types
from aiogram.fsm.context import FSMContext
import asyncio
import logging

from .shared_data import media_groups, media_group_locks, document_groups, document_group_locks
from .common import show_media_buttons
from storage import upload_video_to_storage
from states import BouquetStates


async def handle_back_to_media(callback_query: types.CallbackQuery, state: FSMContext):
    """–ö–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥' –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ."""
    try:
        await callback_query.answer()
        await state.set_state(BouquetStates.waiting_media)
        await callback_query.message.edit_text("–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ (–∏–ª–∏ –∞–ª—å–±–æ–º).", reply_markup=None)
    except Exception as e:
        logging.error(f"handle_back_to_media error: {e}", exc_info=True)


async def handle_photos(message: types.Message, state: FSMContext):
    """–ü—Ä–∏—ë–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–≤–∫–ª—é—á–∞—è –∞–ª—å–±–æ–º—ã)."""
    try:
        data = await state.get_data()
        media_list = data.get("media", [])
        limit = int(data.get("media_limit", 6))

        # –ê–ª—å–±–æ–º
        if message.media_group_id:
            async with media_group_locks[message.media_group_id]:
                media_groups[message.media_group_id].append(message.photo[-1].file_id)
                if len(media_groups[message.media_group_id]) == 1:
                    asyncio.create_task(process_media_group(message.media_group_id, state, message.chat.id, message.bot))
            return

        # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ
        if len(media_list) >= limit:
            await message.answer(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ {limit} —Ñ–æ—Ç–æ")
            await show_media_buttons(message.chat.id, state, message.bot)
            return

        media_list.append(message.photo[-1].file_id)
        await state.update_data(media=media_list)
        await message.answer(f"–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –í—Å–µ–≥–æ: {len(media_list)}/{limit}")
        await show_media_buttons(message.chat.id, state, message.bot)
    except Exception as e:
        logging.error(f"handle_photos error: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.")


async def process_media_group(media_group_id: str, state: FSMContext, chat_id: int, bot):
    """–°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ state —Å —É—á—ë—Ç–æ–º –ª–∏–º–∏—Ç–∞."""
    try:
        await asyncio.sleep(1.5)
        async with media_group_locks[media_group_id]:
            file_ids = media_groups.get(media_group_id, [])
            if not file_ids:
                return

            data = await state.get_data()
            media_list = data.get("media", [])
            limit = int(data.get("media_limit", 6))

            added = 0
            for fid in file_ids:
                if len(media_list) < limit:
                    media_list.append(fid)
                    added += 1
                else:
                    break

            await state.update_data(media=media_list)
            if added:
                await bot.send_message(chat_id, f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞: {added}. –í—Å–µ–≥–æ: {len(media_list)}/{limit}")
                await show_media_buttons(chat_id, state, bot)
    except Exception as e:
        logging.error(f"process_media_group error: {e}", exc_info=True)
    finally:
        media_groups.pop(media_group_id, None)


async def handle_documents(message: types.Message, state: FSMContext):
    """–ü—Ä–∏—ë–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ—Ä–∏–≥–∏–Ω–∞–ª—ã) –∏ –≤–∏–¥–µ–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ã."""
    try:
        if message.document is None:
            return

        mime = (message.document.mime_type or "")
        data = await state.get_data()
        media_list = data.get("media", [])
        limit = int(data.get("media_limit", 6))

        # –í–∏–¥–µ–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        if mime.startswith("video/"):
            processing = await message.answer("–ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ...")
            try:
                url = await upload_video_to_storage(message.bot, message.document.file_id, data.get("current_id", "temp"))
                if url:
                    await state.update_data(video=url)
                    await processing.edit_text("–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ‚úÖ")
                else:
                    await processing.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.")
            except Exception as e:
                logging.error(f"upload video error: {e}", exc_info=True)
                await processing.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ.")
            await show_media_buttons(message.chat.id, state, message.bot)
            return

        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        if mime.startswith("image/"):
            if len(media_list) >= limit:
                await message.answer(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ {limit} —Ñ–æ—Ç–æ")
                await show_media_buttons(message.chat.id, state, message.bot)
                return

            # –ê–ª—å–±–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            if message.media_group_id:
                async with document_group_locks[message.media_group_id]:
                    document_groups[message.media_group_id].append(message.document.file_id)
                    if len(document_groups[message.media_group_id]) == 1:
                        asyncio.create_task(process_document_group(message.media_group_id, state, message.chat.id, message.bot))
                return

            # –û–¥–∏–Ω–æ—á–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            media_list.append(message.document.file_id)
            await state.update_data(media=media_list)
            await message.answer(f"–§–æ—Ç–æ (–∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç) –¥–æ–±–∞–≤–ª–µ–Ω–æ. –í—Å–µ–≥–æ: {len(media_list)}/{limit}")
            await show_media_buttons(message.chat.id, state, message.bot)
            return

        await message.answer("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (JPEG/PNG/WEBP) –∏–ª–∏ –≤–∏–¥–µ–æ.")
    except Exception as e:
        logging.error(f"handle_documents error: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")


async def process_document_group(media_group_id: str, state: FSMContext, chat_id: int, bot):
    try:
        await asyncio.sleep(1.5)
        async with document_group_locks[media_group_id]:
            file_ids = document_groups.get(media_group_id, [])
            if not file_ids:
                return

            data = await state.get_data()
            media_list = data.get("media", [])
            limit = int(data.get("media_limit", 6))

            added = 0
            for fid in file_ids:
                if len(media_list) < limit:
                    media_list.append(fid)
                    added += 1
                else:
                    break

            await state.update_data(media=media_list)
            if added:
                await bot.send_message(chat_id, f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ (–∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ã): {added}. –í—Å–µ–≥–æ: {len(media_list)}/{limit}")
                await show_media_buttons(chat_id, state, bot)
    except Exception as e:
        logging.error(f"process_document_group error: {e}", exc_info=True)
    finally:
        document_groups.pop(media_group_id, None)


async def handle_add_video(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        await callback_query.answer()
        await state.set_state(BouquetStates.waiting_video)
        await callback_query.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞ –±—É–∫–µ—Ç–∞ (MP4/MOV, –¥–æ 20 –ú–ë).", reply_markup=None)
    except Exception as e:
        logging.error(f"handle_add_video error: {e}", exc_info=True)


async def handle_media_done(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞."""
    try:
        await callback_query.answer()
        data = await state.get_data()
        if not data.get("media"):
            await callback_query.message.answer("–ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ")
            return

        await state.set_state(BouquetStates.waiting_description)
        await callback_query.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞ (–¥–æ 800 —Å–∏–º–≤–æ–ª–æ–≤):", reply_markup=None)
    except Exception as e:
        logging.error(f"handle_media_done error: {e}", exc_info=True)


async def process_video(message: types.Message, state: FSMContext):
    """–ü—Ä–∏—ë–º –≤–∏–¥–µ–æ –∫–∞–∫ message.video –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_video."""
    try:
        if not message.video:
            await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞–º–∏ (video) –∏–ª–∏ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç.")
            return

        processing = await message.answer("–ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ...")
        data = await state.get_data()
        url = await upload_video_to_storage(message.bot, message.video.file_id, data.get("current_id", "temp"))
        if url:
            await state.update_data(video=url)
            await processing.edit_text("–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ‚úÖ")
        else:
            await processing.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ.")
        await show_media_buttons(message.chat.id, state, message.bot)
    except Exception as e:
        logging.error(f"process_video error: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ.")
