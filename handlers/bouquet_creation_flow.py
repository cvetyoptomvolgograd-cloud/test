from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select
import logging

from states import BouquetStates
from database import get_db_session, get_or_create_user, create_bouquet, Bouquet
from utils import parse_composition, format_price
from .common import handle_media_upload
from storage import upload_video_to_storage

# ---------- –°—Ç–∞—Ä—Ç ----------

async def start_new_bouquet(message: types.Message, state: FSMContext):
    await state.clear()
    session = await get_db_session()
    try:
        user = await get_or_create_user(session, message.from_user.id)
        await state.update_data(chat_id=message.chat.id)

        # –≥–µ–Ω–µ—Ä–∏–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä
        res = await session.execute(select(Bouquet).order_by(Bouquet.id.desc()).limit(1))
        last = res.scalar_one_or_none()
        try:
            last_num = int(last.bouquet_id) if last and last.bouquet_id.isdigit() else 200
        except Exception:
            last_num = 200
        bouquet_id = f"{last_num + 1:04d}"

        await state.update_data(
            current_id=bouquet_id,
            user_id=user.id,
            media=[],
            media_limit=user.media_limit,
            composition=[],
            video=None,
        )
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞ (3‚Äì40 —Å–∏–º–≤–æ–ª–æ–≤):")
        await state.set_state(BouquetStates.waiting_title)
    except Exception as e:
        logging.error(f"start_new_bouquet error: {e}", exc_info=True)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—É–∫–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    finally:
        await session.close()

# ---------- –ù–∞–∑–≤–∞–Ω–∏–µ ----------

async def process_title(message: types.Message, state: FSMContext):
    try:
        title = (message.text or "").strip()
        if not (3 <= len(title) <= 40):
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 40 —Å–∏–º–≤–æ–ª–æ–≤.")
            return

        data = await state.get_data()
        await state.update_data(title=title)

        kb = InlineKeyboardBuilder()
        kb.add(types.InlineKeyboardButton(text="–î–∞–ª—å—à–µ", callback_data="action:next_step"))
        kb.add(types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="action:change_title"))

        await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ: {title} ‚Ññ{data['current_id']}", reply_markup=kb.as_markup())
    except Exception as e:
        logging.error(f"process_title error: {e}", exc_info=True)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# ---------- –û–ø–∏—Å–∞–Ω–∏–µ ----------

async def process_description(message: types.Message, state: FSMContext):
    try:
        desc = (message.text or "").strip()
        if len(desc) > 800:
            await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–¥–æ 800 —Å–∏–º–≤–æ–ª–æ–≤).")
            return

        await state.update_data(description=desc)

        kb = InlineKeyboardBuilder()
        kb.add(types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="action:skip_composition"))
        kb.add(types.InlineKeyboardButton(text="–£–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–∞–≤", callback_data="action:add_composition"))

        await message.answer("–•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–∞–≤ –±—É–∫–µ—Ç–∞?", reply_markup=kb.as_markup())
        await state.set_state(BouquetStates.waiting_composition)
    except Exception as e:
        logging.error(f"process_description error: {e}", exc_info=True)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# ---------- –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ —Å–æ—Å—Ç–∞–≤–∞ (—Ñ–æ–ª–±—ç–∫) ----------

async def process_composition(message: types.Message, state: FSMContext):
    try:
        composition = parse_composition(message.text or "")
        if not composition:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–æ—Å—Ç–∞–≤. –ü—Ä–∏–º–µ—Ä: ¬´–†–æ–∑—ã - 3¬ª")
            return

        await state.update_data(composition=composition)

        kb = InlineKeyboardBuilder()
        kb.add(types.InlineKeyboardButton(text="–î–∞–ª—å—à–µ", callback_data="action:next_step"))

        await message.answer("–°–æ—Å—Ç–∞–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ü–µ–Ω–µ.", reply_markup=kb.as_markup())
        await state.set_state(BouquetStates.waiting_price)
    except Exception as e:
        logging.error(f"process_composition error: {e}", exc_info=True)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ—Å—Ç–∞–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# ---------- –¶–µ–Ω–∞ / –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä ----------

async def process_price(message: types.Message, state: FSMContext):
    try:
        txt = (message.text or "").strip()
        if not txt.isdigit() or not (1 <= int(txt) <= 999999):
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 999999).")
            return

        price = int(txt)
        await state.update_data(price=price)

        data = await state.get_data()
        preview = (
            f"<b>{data.get('title','')} ‚Ññ{data.get('current_id')}</b>\n\n"
            f"<b>–¶–µ–Ω–∞:</b> {format_price(price * 100)}\n\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{data.get('description','')}\n\n"
        )

        comp = data.get("composition") or []
        if comp:
            preview += "<b>–°–æ—Å—Ç–∞–≤:</b>\n"
            for item in comp:
                preview += f"‚Ä¢ {item.get('raw_name','')} ‚Äî {item.get('qty','')}\n"

        kb = InlineKeyboardBuilder()
        kb.add(types.InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="action:save_bouquet"))
        kb.add(types.InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="action:edit_bouquet"))

        await message.answer(preview, reply_markup=kb.as_markup())
    except Exception as e:
        logging.error(f"process_price error: {e}", exc_info=True)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ü–µ–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# ---------- –ü–µ—Ä–µ—Ö–æ–¥—ã / —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ----------

async def handle_actions(callback: types.CallbackQuery, state: FSMContext):
    try:
        action = (callback.data or "").split(":")[1]

        if action == "next_step":
            current = await state.get_state()
            if current == BouquetStates.waiting_title.state:
                data = await state.get_data()
                limit = data.get("media_limit", 6)

                kb = InlineKeyboardBuilder()
                kb.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ", callback_data="action:add_video"))
                kb.add(types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="action:media_done"))

                await callback.message.edit_text(
                    f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ 1‚Äì{limit} —Ñ–æ—Ç–æ –¥–ª—è –±—É–∫–µ—Ç–∞\n"
                    "üìå –î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–∞–π–ª—ã –∫–∞–∫ <b>–î–æ–∫—É–º–µ–Ω—Ç—ã</b>\n"
                    "üé• –í–∏–¥–µ–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π",
                    reply_markup=kb.as_markup()
                )
                await state.set_state(BouquetStates.waiting_media)
                await callback.answer()
                return

            if current in (BouquetStates.waiting_description.state, BouquetStates.waiting_composition.state):
                await state.set_state(BouquetStates.waiting_price)
                await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
                await callback.answer()
                return

        elif action == "change_title":
            await state.set_state(BouquetStates.waiting_title)
            await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
            await callback.answer()
            return

        elif action == "add_video":
            from .media_processing import handle_add_video
            await handle_add_video(callback, state)
            return

        elif action == "media_done":
            from .media_processing import handle_media_done
            await handle_media_done(callback, state)
            return

        elif action == "skip_composition":
            await state.set_state(BouquetStates.waiting_price)
            await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
            await callback.answer()
            return

        elif action == "add_composition":
            # —Å—Ç–∞—Ä—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
            from .composition_picker import show_category_page
            await show_category_page(callback.message.chat.id, state, callback.bot, page=1)
            await state.set_state(BouquetStates.choosing_category)
            await callback.answer()
            return

        elif action == "save_bouquet":
            data = await state.get_data()
            session = await get_db_session()
            try:
                media = data.get("media", [])
                if media and isinstance(media[0], str) and not media[0].startswith("http"):
                    media = await handle_media_upload(callback.bot, media, data["current_id"])

                video_url = data.get("video")
                if video_url and not str(video_url).startswith("http"):
                    video_url = await upload_video_to_storage(callback.bot, video_url, data["current_id"])

                bouquet = await create_bouquet(session, {
                    "bouquet_id": data["current_id"],
                    "user_id": data["user_id"],
                    "short_title": data.get("title"),
                    "title_display": f"{data.get('title')} ‚Ññ{data.get('current_id')}",
                    "photos": media,
                    "video_path": video_url,
                    "description": data.get("description", ""),
                    "composition": data.get("composition", []),
                    "price_minor": (data.get("price", 0) or 0) * 100,
                })
                await callback.message.answer(f"–ë—É–∫–µ—Ç ¬´{bouquet.title_display}¬ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
                await state.clear()
            except Exception as e:
                logging.error(f"save_bouquet error: {e}", exc_info=True)
                await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±—É–∫–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            finally:
                await session.close()
            await callback.answer()
            return

        elif action == "edit_bouquet":
            await state.set_state(BouquetStates.waiting_price)
            await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
            await callback.answer()
            return

    except Exception as e:
        logging.error(f"handle_actions error: {e}", exc_info=True)
        try:
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        except Exception:
            pass
