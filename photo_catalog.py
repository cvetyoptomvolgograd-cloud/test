import os
import asyncio
import logging
import signal
import sys
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from aiogram.types import Update
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from database import init_db, get_db_session, get_or_create_user
from handlers import setup_handlers

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –±–æ—Ç–∞
bot = None
dp = None


class FSMLoggingMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM"""

    async def __call__(self, handler, event, data):
        state = data.get('state')
        if state:
            current_state = await state.get_state()
            logger.info(f"FSM State Change: {current_state}")

        return await handler(event, data)


async def create_bot():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"""
    global bot, dp

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        bot = Bot(token=os.getenv("BOT_TOKEN"), default=DefaultBotProperties(parse_mode="HTML"))

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π (Redis)
        storage = RedisStorage.from_url(os.getenv("REDIS_URL", "redis://localhost:6379/0"))
        dp = Dispatcher(storage=storage)

        # –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è FSM
        dp.update.outer_middleware(FSMLoggingMiddleware())

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ (–í –ü–ï–†–í–£–Æ –û–ß–ï–†–ï–î–¨!)
        dp.message.register(cmd_start, Command("start"))
        dp.message.register(cmd_help, Command("help"))
        dp.message.register(cmd_help, F.text == "‚ùì –ü–æ–º–æ—â—å")

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–í–û –í–¢–û–†–£–Æ –û–ß–ï–†–ï–î–¨!)
        setup_handlers(dp)

        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞: {e}")
        return False


async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        await state.clear()

        session = await get_db_session()
        try:
            user = await get_or_create_user(session, message.from_user.id)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            builder = ReplyKeyboardBuilder()
            builder.add(types.KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –±—É–∫–µ—Ç"))
            builder.add(types.KeyboardButton(text="üìö –ú–æ–∏ –±—É–∫–µ—Ç—ã"))
            builder.add(types.KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
            builder.add(types.KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å"))

            await message.answer(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±—É–∫–µ—Ç–æ–≤!\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
                reply_markup=builder.as_markup(resize_keyboard=True)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_start (—Ä–∞–±–æ—Ç–∞ —Å –ë–î): {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        finally:
            await session.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def cmd_help(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    try:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–º–æ—â–∏
        await state.clear()

        help_text = (
            "ü§ñ <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>\n\n"
            "‚Ä¢ <b>‚ûï –î–æ–±–∞–≤–∏—Ç—å –±—É–∫–µ—Ç</b> - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±—É–∫–µ—Ç\n"
            "‚Ä¢ <b>üìö –ú–æ–∏ –±—É–∫–µ—Ç—ã</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –±—É–∫–µ—Ç–æ–≤\n"
            "‚Ä¢ <b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n"
            "–ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±—É–∫–µ—Ç–∞:\n"
            "1. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
            "2. –î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n"
            "3. –£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
            "4. –î–æ–±–∞–≤—å—Ç–µ —Å–æ—Å—Ç–∞–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n"
            "5. –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É\n"
            "6. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –±—É–∫–µ—Ç\n"
        )
        await message.answer(help_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_help: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–∫–∏.")


async def shutdown():
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
    if bot:
        await bot.session.close()
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def handle_exception(exc_type, exc_value, exc_traceback):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    if issubclass(exc_type, KeyboardInterrupt):
        # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º KeyboardInterrupt
        sys.__excepthook__(exc_type, exc_value, exc_traceback)
        return

    logger.error("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:", exc_info=(exc_type, exc_value, exc_traceback))


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
sys.excepthook = handle_exception


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    max_retries = 5
    retry_delay = 10  # —Å–µ–∫—É–Ω–¥

    for attempt in range(max_retries):
        try:
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ {attempt + 1}/{max_retries}")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
            await init_db()
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

            # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis
            try:
                import redis
                redis_client = redis.Redis.from_url(os.getenv("REDIS_URL", "redis://localhost:6379/0"))
                redis_client.ping()
                logger.info("Redis –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            except redis.ConnectionError:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Redis –∑–∞–ø—É—â–µ–Ω.")
                return False

            # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
            if not await create_bot():
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞")

            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            logger.info("–ó–∞–ø—É—Å–∫ polling...")
            await dp.start_polling(bot)
            break

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")

            if attempt < max_retries - 1:
                logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(retry_delay)
                retry_delay *= 2  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            else:
                logger.error("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
                await shutdown()
                sys.exit(1)

        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (Ctrl+C)")
            await shutdown()
            break


if __name__ == "__main__":
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    signal.signal(signal.SIGINT, lambda s, f: asyncio.create_task(shutdown()))
    signal.signal(signal.SIGTERM, lambda s, f: asyncio.create_task(shutdown()))

    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
    finally:
        logger.info("–†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")